/* Setting the correct mobile view  https://courses.joshwcomeau.com/css-for-js/05-responsive-css/11-viewport-units */
/* <meta name='viewport' content='initial-scale=1, viewport-fit=cover'> */
html,
body,
#root {
  /* --full-width: calc(100vw - var(--scrollbar-width)); */
  width: 100%;
  height: 100%;
  /* height: 100vh; */
  /* height: calc(var(--vh, 1vh) * 100); */
  /* height: calc(100vh - calc(100vh - 100%)); */
  /* padding-bottom: 6rem; */
}
.wrapper {
  width: var(--full-width);
}

/* @supports (padding: max(0px)) { */
/* html,
body,
#root {
  padding-left: env(safe-area-inset-left) gst;
  padding-right: env(safe-area-inset-right);
  padding-top: env(safe-area-inset-top);
  padding-bottom: env(safe-area-inset-bottom);
} */
/* } */
/* const BREAKPOINTS = {
  tabletMin: 550,
  laptopMin: 1100,
  desktopMin: 1500,
}
const QUERIES = {
  'tabletAndUp': `(min-width: ${BREAKPOINTS.tabletMin}px)`,
  'laptopAndUp': `(min-width: ${BREAKPOINTS.laptopMin}px)`,
  'desktopAndUp': `(min-width: ${BREAKPOINTS.desktopMin}px)`,
}



converted to rems for a better scallability - rem-based viewports scale with the user's chosen default font size. As the font size gets bigger, the breakpoints slide up the scale.
const BREAKPOINTS = {
  tabletMin: 550,
  laptopMin: 1100,
  desktopMin: 1500,
}
const QUERIES = {
  'tabletAndUp': `(min-width: ${BREAKPOINTS.tabletMin / 16}rem)`,
  'laptopAndUp': `(min-width: ${BREAKPOINTS.laptopMin / 16}rem)`,
  'desktopAndUp': `(min-width: ${BREAKPOINTS.desktopMin / 16}rem)`,
}
 */
/* Breaking Points 0-550px — Mobile
550-1100px — Tablet
1100-1500px — Laptop
1500+px — Desktop *
ref https://courses.joshwcomeau.com/css-for-js/05-responsive-css/07-breakpoints/

styled-components has a “theming system”. This allows us to access theme variables like colors and breakpoints without needing to import our constants.
Styled Component Way: To use themes in styled-components, first we need to make it available through a ThemeProvider:

import { ThemeProvider } from 'styled-components';
import { QUERIES } from '../../constants';
function App() {
  return (
     <ThemeProvider theme={{ queries: QUERIES }}>
    /*</ThemeProvider>
  )
} */

/* .page-wrapper {
  width: clamp(500px, 65%, 800px);
  max-width: 100%;
} */
/* clamp takes 3 values:

The minimum value
The ideal value
The maximum value
but it combines it into a single property value. I */

/* We shouldn't think of hover events as a "big screen thing", we should think of them as a "mouse/trackpad thing"
This is a relatively new addition to the Media Queries specification. They're called “Interaction Media Features”. They allow us to apply styles based on which input mechanism the user is using.

What's the difference between "hover" and "pointer"? They actually refer to two distinct capabilities. hover is the ability for a device to move the cursor without also triggering a click/tap on the element underneath; a mouse can do this, but your finger or a stylus can't. pointer refers to the level of control the user has over the position of the cursor.

Somewhat magically, browsers are able to infer which input device you're using! This is a dynamic query: if you switch from using a mouse to using a keyboard (for navigation, not for typing), the values for hover and pointer will update dynamically.

another one @media (prefers-color-scheme: dark) {}
/* 
  body {
  overflow-y: scroll;
} */
button:hover {
  cursor: pointer;
}
/* hover current vs recomended */
/* @media (hover: hover) and (pointer: fine) {
  button:hover {
    background-color: red;
  }
} */

body {
  margin: 0 auto;
  font-family: "Sofia Pro";
  color: #254cdd;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background: #170b37;
  color: white;
}

button:active {
  background-color: white;
  color: pink;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

.App {
  /* max-width: 80vh;
  max-height: 80vh; */
  padding: 60px 100px;
  margin: 0 auto;
  text-align: left;
  /* border: solid 1px red; */
  /* width: clamp(500px, 65%, 800px); */
}
input {
  border-top-style: hidden;
  border-right-style: hidden;
  border-left-style: hidden;
  border-bottom-style: groove;
  font-size: 16px;
  width: 100%;
  border-color: rgba(4, 4, 5, 0.1);
  line-height: 32px;
}

input:focus {
  outline: none;
  border-color: rgba(4, 4, 5, 0.4);
}

/* button {
  padding: 8px 16px;
  max-height: 40px;
  border-color: #254cdd;
  color: #254cdd;
  background-color: white;
  border-radius: 8px;
  align-items: center;
  font-size: 16px;
  font-weight: 500;
  text-align: center;
  font-weight: bold;
  cursor:pointer;
}

button:hover {
  margin-top: -1px;
} */
/* 
#title {
  padding-top: 32px;
} */
/* 
.uploadFile {
  border: 4px dashed rgba(4, 4, 5, 0.1);
  border-radius: 16px;
  text-align: center;
  padding: 32px 60px;
} */
/* 
#walletButton {
  text-align: right;
  float: right;
  margin-bottom: 50px;
  line-height: 16px;
} */
/*
#walletButton:focus {
  outline:none;
  border: none;
}

#walletButton:hover {
  outline:none;
  border :none;
} */
/* 
#mintButton {
  margin-top: 40px;
  background-color: #254cdd;
  color: white;
} */

a {
  color: inherit; /* blue colors for links too */
 
}
